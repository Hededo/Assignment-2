#version 410 core                                                  
// Per-vertex inputs                                                
layout (location = 0) in vec4 position;   
layout (location = 1) in vec4 normal;                          
layout (location = 2) in vec4 attributeColor;                            
                          
																	
layout(std140) uniform constants									
{																	
	mat4 mv_matrix;													
	mat4 view_matrix;												
	mat4 proj_matrix;												
	vec4 uni_color;		
	vec4 light_pos;									     		
	vec4 useUniformColor;
	vec4 invertNormals;		
	vec4 isSphere;						     
};		

// Light and material properties
uniform vec3 diffuse_albedo = vec3(0.5, 0.2, 0.7);
uniform vec3 specular_albedo = vec3(0.7);
uniform float specular_power = 128.0;
uniform vec3 ambient = vec3(0.3, 0.2, 0.2);			
										                                                         
out VS_OUT                                                         
{                                                                 
    vec3 color;                                                    
} vs_out;                                                          
                                                                   
                                                                 
void main(void)                                                    
{    
    vec4 adjustedNormal = normal;
	if (invertNormals.x == 1) 
	{
	   adjustedNormal = -normal; //invert normals for the inner cube
	}                                                    
    // Calculate view-space coordinate								
    vec4 P = mv_matrix * position;	

	// Calculate normal in view space
    vec4 N = mv_matrix * adjustedNormal;
	// Calculate view-space light vector
    vec3 L = light_pos.xyz - P.xyz;
	// Calculate view vector (simply the negative of the view-space position)
    vec3 V = -P.xyz;

	// Normalize all three vectors
    N = normalize(N);
    L = normalize(L);
    V = normalize(V);
    // Calculate R by reflecting -L around the plane defined by N
    vec3 R = reflect(-L, N.xyz);

	// Calculate the diffuse and specular contributions
    vec3 diffuse = max(dot(N.xyz, L), 0.0) * diffuse_albedo;
	vec3 specular = pow(max(dot(R, V), 0.0), specular_power) * specular_albedo;
	
	// Send output color to fragment shader
	if (isSphere.x == 1)								
    {                               				
		vs_out.color = (ambient + diffuse + specular)*position.xyz + vec3(0.3,0.3,0.3);		
	}   
	else 
	{
		vs_out.color = (ambient + diffuse + specular)*attributeColor.xyz;
	} 
	
							
    if (useUniformColor.x == 1)								
    {                               							
       vs_out.color = (ambient + diffuse + specular)*uni_color.xyz;		
	}                           									           
  
	// Calculate the clip-space position of each vertex
    gl_Position = proj_matrix * P;							    
}                                                                  